import Taro from '@tarojs/api';
import { CallbackManager } from '../../utils/handler';
export declare class InnerAudioContext implements Taro.InnerAudioContext {
    Instance?: HTMLAudioElement;
    errorStack: CallbackManager;
    stopStack: CallbackManager;
    __startTime: number;
    constructor();
    set autoplay(e: boolean);
    get autoplay(): boolean;
    get buffered(): number;
    get currentTime(): number;
    get duration(): number;
    set loop(e: boolean);
    get loop(): boolean;
    get paused(): true;
    set src(e: string);
    get src(): string;
    set volume(e: number);
    get volume(): number;
    set playbackRate(e: number);
    get playbackRate(): number;
    set obeyMuteSwitch(_e: boolean);
    get obeyMuteSwitch(): boolean;
    set startTime(e: number);
    get startTime(): number;
    set referrerPolicy(e: string);
    get referrerPolicy(): string;
    private setProperty;
    play: () => Promise<void> | undefined;
    pause: () => void | undefined;
    stop: () => void;
    seek: (position: number) => void;
    /**
     * @TODO destroy得并不干净
     */
    destroy: () => void;
    onCanplay: (callback?: () => void) => void | undefined;
    onPlay: (callback?: () => void) => void | undefined;
    onPause: (callback?: () => void) => void | undefined;
    onStop: (callback?: () => void) => void;
    onEnded: (callback?: () => void) => void | undefined;
    onTimeUpdate: (callback?: () => void) => void | undefined;
    onError: (callback?: ((res: Taro.InnerAudioContext.onErrorDetail) => void) | undefined) => void;
    onWaiting: (callback?: () => void) => void | undefined;
    onSeeking: (callback?: () => void) => void | undefined;
    onSeeked: (callback?: () => void) => void | undefined;
    offCanplay: (callback?: () => void) => void | undefined;
    offPlay: (callback?: () => void) => void | undefined;
    offPause: (callback?: () => void) => void | undefined;
    offStop: (callback?: () => void) => void;
    offEnded: (callback?: () => void) => void | undefined;
    offTimeUpdate: (callback?: () => void) => void | undefined;
    offError: (callback?: () => void) => void;
    offWaiting: (callback?: () => void) => void | undefined;
    offSeeking: (callback?: () => void) => void | undefined;
    offSeeked: (callback?: () => void) => void | undefined;
}
