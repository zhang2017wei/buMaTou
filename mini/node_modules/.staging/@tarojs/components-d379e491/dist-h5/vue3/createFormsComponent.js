import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { h, toRefs, computed } from 'vue';
import { useForwardRef } from './forwardRef';
export default function createFormsComponent(name, eventName) {
  var modelValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'value';
  var classNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var props = {
    modelValue: null
  };

  if (name === 'taro-input') {
    props.focus = Boolean;
  }

  return {
    emits: ['tap', 'update:modelValue'],
    props: props,
    setup: function setup(props, _ref) {
      var slots = _ref.slots,
          emit = _ref.emit;

      var _toRefs = toRefs(props),
          model = _toRefs.modelValue,
          focus = _toRefs.focus;

      var attrs = computed(function () {
        var _ref2;

        return name === 'taro-input' ? (_ref2 = {}, _defineProperty(_ref2, modelValue, model.value), _defineProperty(_ref2, 'auto-focus', focus.value), _ref2) : _defineProperty({}, modelValue, model.value);
      });
      var forwardRef = useForwardRef();
      return function () {
        return h("".concat(name, "-core"), _objectSpread(_objectSpread({
          ref: forwardRef,
          class: ['hydrated'].concat(_toConsumableArray(classNames))
        }, attrs.value), {}, _defineProperty({
          onClick: function onClick(e) {
            emit('tap', e);
          }
        }, "on".concat(eventName), function on(e) {
          emit('update:modelValue', e.detail.value);
        })), slots);
      };
    }
  };
}